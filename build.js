const esbuild = require("esbuild");
const fs = require("fs");
const spglslAngleCompile = require("spglsl").spglslAngleCompile;
var minify = require("html-minifier").minify;

async function minifyGLSLFile(path) {
  const result = await spglslAngleCompile({
    language: /\.vert\.glsl$/.test(path)
      ? "Vertex"
      : /\.comp\.glsl/.test(path)
      ? "Compute"
      : "Fragment",
    compileMode: "Optimize",
    mainFilePath: path,
    mainSourceCode: fs.readFileSync(path, "utf8"),
    minify: true,
  });

  if (!result.valid) {
    console.log(result.infoLog);
    throw new Error("compilation failed");
  }
  return result.output;
}

const glslPlugin = {
  name: "glsl",
  setup(build) {
    build.onLoad({ filter: /\.glsl$/i }, async (args) => ({
      contents: await minifyGLSLFile(args.path),
      loader: "text",
    }));
  },
};

function postProcess(result, minifyHtml = false) {
  let html = fs
    .readFileSync("static/index.html")
    .toString()
    .replace(
      '<script src="src/runner.js"></script>',
      `<script>${result.outputFiles[0].text}</script>`
    )
    .replace(
      /<link rel="stylesheet" href="css\/style.css"\s*\/?>/,
      `<style>${result.outputFiles[1].text}</style>`
    );
  const minifiedHTML = minifyHtml
    ? minify(html, {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true,
        minifyCSS: true,
        minifyJS: true,
        removeTagWhitespace: true,
      })
    : html;

  fs.writeFileSync("build/index.html", minifiedHTML);
}

async function build() {
  const result = await esbuild.build({
    entryPoints: ["src/runner.ts", "css/style.css"],
    bundle: true,
    minify: true,
    write: false,
    outdir: "build",
    plugins: [glslPlugin],
  });
  postProcess(result, true);
}

async function watch() {
  if (!fs.existsSync("watch")) fs.mkdirSync("watch");
  fs.copyFileSync("static/index.html", "watch/index.html");
  const result = await esbuild.build({
    entryPoints: ["src/runner.ts", "css/style.css"],
    bundle: true,
    write: true,
    outdir: "watch",
    loader: {
      ".glsl": "text",
    },
    watch: {
      onRebuild(error, result) {
        if (error) {
          console.error(
            new Date().toLocaleString(),
            "Watch build failed:",
            error
          );
        } else {
          console.log(new Date().toLocaleString(), "Watch build succeeded");
          fs.copyFileSync("static/index.html", "watch/index.html");
        }
      },
    },
  });
  console.log(new Date().toLocaleString(), "Watching");
  return result;
}

if (process.argv.includes("--watch")) {
  watch();
} else {
  build();
}
